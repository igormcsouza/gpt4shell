name: Build and Publish Docker Image on Release

permissions:
  deployments: write
  contents: write  # Changed from read to write to allow committing version updates
  pull-requests: write  # Required to create and merge pull requests

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to build'
        required: true
        type: string

env:
  DOCKER_IMAGE: igormcsouza/gpt4shell

jobs:
  validate-and-build:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}  # Ensure we have the right token for push operations

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.0.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Get release tag and version
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            tag="${{ github.event.release.tag_name }}"
          else
            tag="${{ github.event.inputs.tag }}"
          fi
          
          # Remove 'v' prefix from tag if present to get clean version
          version_clean=${tag#v}
          
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "version=$version_clean" >> $GITHUB_OUTPUT
          echo "🏷️  Release tag: $tag"
          echo "📝 Version for Docker: $version_clean"

      - name: Create version update branch
        run: |
          echo "🔄 Creating version update branch"
          git checkout main
          git pull origin main
          
          # Create a new branch for the version update
          branch_name="release/update-version-${{ steps.tag.outputs.version }}"
          git checkout -b "$branch_name"
          echo "branch_name=$branch_name" >> $GITHUB_ENV

      - name: Update pyproject.toml version
        run: |
          echo "📝 Updating pyproject.toml version to ${{ steps.tag.outputs.version }}"
          
          # Update version in pyproject.toml using sed
          sed -i "s/^version = \".*\"/version = \"${{ steps.tag.outputs.version }}\"/" pyproject.toml
          
          # Verify the change
          echo "✅ Updated version in pyproject.toml:"
          grep '^version = ' pyproject.toml

      - name: Commit and push version update
        run: |
          # Configure git with GitHub Actions bot credentials
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Check if there are changes to commit
          if git diff --quiet pyproject.toml; then
            echo "ℹ️  No changes to commit - version already up to date"
            echo "skip_pr=true" >> $GITHUB_ENV
          else
            echo "📝 Committing version update"
            git add pyproject.toml
            git commit -m "🔖 Update version to ${{ steps.tag.outputs.version }} for release ${{ steps.tag.outputs.tag }}"
            
            echo "📤 Pushing version update branch"
            git push origin "$branch_name"
            
            echo "✅ Version update committed and pushed to branch"
            echo "skip_pr=false" >> $GITHUB_ENV
          fi

      - name: Create Pull Request
        if: env.skip_pr == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔖 Update version to ${{ steps.tag.outputs.version }} for release ${{ steps.tag.outputs.tag }}`,
              head: '${{ env.branch_name }}',
              base: 'main',
              body: `This PR automatically updates the version in \`pyproject.toml\` to \`${{ steps.tag.outputs.version }}\` for release \`${{ steps.tag.outputs.tag }}\`.
              
              This is an automated change generated by the release workflow to keep the package version synchronized with the git tag.
              
              **Changes:**
              - Update \`pyproject.toml\` version from \`0.0.0\` to \`${{ steps.tag.outputs.version }}\`
              
              **Release Tag:** ${{ steps.tag.outputs.tag }}
              **Workflow Run:** [View Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`
            });
            
            console.log(`📋 Created pull request #${pr.number}: ${pr.html_url}`);
            
            // Try to auto-merge the PR if possible
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                commit_title: `🔖 Update version to ${{ steps.tag.outputs.version }} for release ${{ steps.tag.outputs.tag }}`,
                commit_message: 'Automated version update from release workflow',
                merge_method: 'squash'
              });
              console.log(`✅ Pull request #${pr.number} merged successfully`);
            } catch (error) {
              console.log(`ℹ️  Could not auto-merge PR #${pr.number}. Manual merge may be required.`);
              console.log(`Error: ${error.message}`);
              console.log(`🔗 PR URL: ${pr.html_url}`);
            }

      - name: Wait for version update
        if: env.skip_pr == 'false'
        run: |
          echo "⏳ Waiting for version update to be merged..."
          sleep 30
          
          # Pull the latest changes to get the updated version
          git checkout main
          git pull origin main

      - name: Get commit SHA
        id: sha
        run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ steps.tag.outputs.version }}
            ${{ env.DOCKER_IMAGE }}:sha-${{ steps.sha.outputs.sha }}
            ${{ env.DOCKER_IMAGE }}:latest
          labels: |
            org.opencontainers.image.title=GPT4Shell
            org.opencontainers.image.description=A terminal-based chat application with rich text formatting
            org.opencontainers.image.version=${{ steps.tag.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

      - name: Create deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: '${{ steps.tag.outputs.tag }}',
              environment: 'production',
              description: 'Docker image ${{ steps.tag.outputs.version }}',
              auto_merge: false,
              required_contexts: []
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              description: 'Docker image built and pushed successfully',
              environment_url: 'https://hub.docker.com/r/${{ env.DOCKER_IMAGE }}'
            });

      - name: Summary
        run: |
          echo "🚀 Docker image published successfully!"
          echo "📦 Tags created:"
          echo "  - ${{ env.DOCKER_IMAGE }}:${{ steps.tag.outputs.version }}"
          echo "  - ${{ env.DOCKER_IMAGE }}:sha-${{ steps.sha.outputs.sha }}"
          echo "  - ${{ env.DOCKER_IMAGE }}:latest"
          echo "🔗 Docker Hub: https://hub.docker.com/r/${{ env.DOCKER_IMAGE }}"