name: Semantic Release and Docker Build

permissions:
  contents: write
  issues: write
  pull-requests: write

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  DOCKER_IMAGE: igormcsouza/gpt4shell

jobs:
  release:
    runs-on: ubuntu-latest
    environment: production
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.0.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install

      - name: Run Semantic Release
        id: release
        uses: python-semantic-release/python-semantic-release@v8.7.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

  build-and-publish:
    needs: release
    if: needs.release.outputs.released == 'true'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.tag }}

      - name: Get commit SHA
        id: sha
        run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ needs.release.outputs.version }}
            ${{ env.DOCKER_IMAGE }}:sha-${{ steps.sha.outputs.sha }}
            ${{ env.DOCKER_IMAGE }}:latest
          labels: |
            org.opencontainers.image.title=GPT4Shell
            org.opencontainers.image.description=A terminal-based chat application with rich text formatting
            org.opencontainers.image.version=${{ needs.release.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

      - name: Create deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: '${{ needs.release.outputs.tag }}',
              environment: 'production',
              description: 'Docker image ${{ needs.release.outputs.version }}',
              auto_merge: false,
              required_contexts: []
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              description: 'Docker image built and pushed successfully',
              environment_url: 'https://hub.docker.com/r/${{ env.DOCKER_IMAGE }}'
            });

      - name: Summary
        run: |
          echo "ðŸš€ Docker image published successfully!"
          echo "ðŸ“¦ Tags created:"
          echo "  - ${{ env.DOCKER_IMAGE }}:${{ needs.release.outputs.version }}"
          echo "  - ${{ env.DOCKER_IMAGE }}:sha-${{ steps.sha.outputs.sha }}"
          echo "  - ${{ env.DOCKER_IMAGE }}:latest"
          echo "ðŸ”— Docker Hub: https://hub.docker.com/r/${{ env.DOCKER_IMAGE }}"